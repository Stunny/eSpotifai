package threads;

import java.util.LinkedList;

import controller.NetworkController;
import controller.ThreadController;
import model.Song;
import view.MainWindow;
/**
 * Thread que actualitza la informació mostrada cada 3 segons
 * @author Elna Cabot, Miguel Diaz, Marc Millán, Alejandro Vogel, Marta Zapatero
 *
 */
public class RefreshThread extends Thread {
	/**
	 * Controlador de Thread
	 * @see ThreadController
	 */
	private ThreadController threadController;
	
	private NetworkController networkcontroller;
	/**
	 * Construeix el thread
	 * @param threadController Controlador de thread
	 */
	public RefreshThread(ThreadController threadController, NetworkController networkcontroller) {
		super();
		this.threadController = threadController;
		this.networkcontroller = networkcontroller;
	}




	/**
	 * 
	 */
	public void run() {

		int i=0;
		while (true) {
			try {
				Thread.sleep(1000);
				switch(threadController.getmainWindow().getMode()){
				case "all":
					threadController.refreshSongList();
					break;
				default:
					threadController.refreshSongListPlaylist();
					break;
				}
				threadController.refresUserPlaylistList();
				threadController.refresPublicPlaylistList();
				if (threadController.getmainWindow().getInReproduccion() == 1){
					
					threadController.getmainWindow().setInReproduccion(0); 	
					networkcontroller.SongReproduction(threadController.getmainWindow().getIdSong());
				}
				
			} catch (InterruptedException e) {
				Thread.currentThread().interrupt();
			}

		}

	}

}
